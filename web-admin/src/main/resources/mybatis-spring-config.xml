<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<bean id="dataSource_Mysql" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
<!-- 		<property name="url" value="${db-url}" /> -->
		<property name="url" value="jdbc:mysql://localhost:3306/ttcloud" />
<!-- 		<property name="username" value="${db-username}" /> -->
		<property name="username" value="root" />
<!-- 		<property name="password" value="${db-password}" /> -->
		<property name="password" value="aaaaaa" />
		
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="1" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<property name="validationQuery">
			<value>SELECT 1</value>
		</property>
		
<!-- 		<property name="testOnBorrow" value="false" /> -->
<!-- 		<property name="testOnReturn" value="false" /> -->
<!-- 		<property name="testWhileIdle" value="true" /> -->

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		
<!-- 		<property name="dbType" value = "${db-dbType}" /> -->

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<!-- Druid提供了WallFilter，它是基于SQL语义分析来实现防御SQL注入攻击的    -->
		<!--  -->
<!-- 		<property name="filters" value="mergeStat,wall,config" /> -->
		
<!-- 		<property name="connectionProperties" value="config.decrypt=${config.decrypt}" /> -->
		
	</bean>
	
	<bean id="dataSource_SqlServer" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
		<property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
		<property name="url" value="jdbc:sqlserver://192.168.18.138:1433;DatabaseName=Pigeon1"/>
		<property name="username" value="sa"/>
		<property name="password" value="123sa"/>
		
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="1" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

<!-- 		<property name="validationQuery"> -->
<!-- 			<value>SELECT 1</value> -->
<!-- 		</property> -->
		
<!-- 		<property name="testOnBorrow" value="false" /> -->
<!-- 		<property name="testOnReturn" value="false" /> -->
<!-- 		<property name="testWhileIdle" value="true" /> -->

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		
<!-- 		<property name="dbType" value = "${db-dbType}" /> -->

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<!-- Druid提供了WallFilter，它是基于SQL语义分析来实现防御SQL注入攻击的    -->
		<!--  -->
<!-- 		<property name="filters" value="mergeStat,wall,config" /> -->
		
<!-- 		<property name="connectionProperties" value="config.decrypt=${config.decrypt}" /> -->
		
	</bean>
	
	
		<!-- 动态数据源 -->
	<bean id="dynamicDataSource" class="com.web.util.DynamicDataSource">
		<!-- 通过key-value的形式来关联数据源 -->
		<property name="targetDataSources">
			<map>
				<entry value-ref="dataSource_Mysql" key="dataSource_Mysql"></entry>
			 	<entry value-ref="dataSource_SqlServer" key="dataSource_SqlServer"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource_Mysql" />
	</bean>
	
	<!-- using the multi-db feature you will need to set the databaseIdProvider property -->
	<bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	    <property name="properties">
	        <props>
	            <prop key="SQL Server">sqlserver</prop>
	            <prop key="DB2">db2</prop>
	            <prop key="Oracle">oracle</prop>
	            <prop key="MySQL">mysql</prop>
	        </props>
	    </property>
	</bean>
	
	<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
	    <property name="properties" ref="vendorProperties"/>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="databaseIdProvider" ref="databaseIdProvider"/>
		<property name="mapperLocations" value="classpath*:com/web/mapping/*.xml" />
	</bean>


	<!--  事务控制  begin -->
	        
    <!-- 事务相关控制 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dynamicDataSource"/>
	</bean>
 
	<!-- 基本事务定义,使用transactionManager作事务管理,默认get* find*方法的事务为readonly,其余方法按默认设置. 默认的设置请参考Spring文档事务一章. -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="query*" propagation="REQUIRED" />
			<tx:method name="generator*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="check*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="*" read-only="false" />
		</tx:attributes>
	</tx:advice>
	
	 <!-- 以AspectJ方式 定义 AOP -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.web.service..*.*(..))" advice-ref="txAdvice" />
	</aop:config>
	
	<!--  事务控制 end -->

	<!-- 引入persist持久化bean的定义 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.web.dao" />
	</bean>

</beans>
